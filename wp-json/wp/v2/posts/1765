{"id":1765,"date":"2014-11-24T11:10:26","date_gmt":"2014-11-24T16:10:26","guid":{"rendered":"http:\/\/nazitunnels.org\/?p=1765"},"modified":"2014-11-24T11:10:26","modified_gmt":"2014-11-24T16:10:26","slug":"watermarking-and-ocring-your-images","status":"publish","type":"post","link":"http:\/\/nazitunnels.org\/2014\/11\/24\/watermarking-and-ocring-your-images\/","title":{"rendered":"Watermarking and OCRing your images"},"content":{"rendered":"<p>I have accumulated nearly 2000 images, all scans of documents, relating to the dissertation. One goal of the project is to make these documents open and available in an Omeka database. In order to more correctly attribute these documents to the archives where I got them, I need to place a watermark on each image.<\/p>\n<p>I also need the content of the documents in a format to make it easy to search and copy\/paste.<\/p>\n<p>The tools to do each of those steps are readily available, and easy to use, but I needed a script to put them together so I can run them on a handful of images at a time, or even hundreds at a time.<\/p>\n<p>To layout the solution, I&#8217;ll walk through the problem and how I solved it.<\/p>\n<p>When at the <a title=\"Neuengamme: Second Week Part 2\" href=\"http:\/\/nazitunnels.org\/2013\/09\/neuengamme-second-week-part-2.html\">Neuengamme Concentration Camp Memorial Archive<\/a> near Hamburg in the summer of 2013, I found about 25 testimonials of former inmates. In most cases I took a picture of the written testimonial (the next day I realized I could use their copier\/scanner and make nicer copies). So I ended up with quite a number of folders, each containing a number of images.<\/p>\n<p><a href=\"http:\/\/nazitunnels.org\/wp-content\/uploads\/2014\/11\/Screen-Shot-2014-11-18-at-10.52.38-AM.png\" data-rel=\"lightbox-image-0\" data-rl_title=\"\" data-rl_caption=\"\" title=\"\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-1766\" src=\"http:\/\/nazitunnels.org\/wp-content\/uploads\/2014\/11\/Screen-Shot-2014-11-18-at-10.52.38-AM.png\" alt=\"Screen Shot 2014-11-18 at 10.52.38 AM\" width=\"632\" height=\"460\" srcset=\"http:\/\/nazitunnels.org\/wp-content\/uploads\/2014\/11\/Screen-Shot-2014-11-18-at-10.52.38-AM.png 632w, http:\/\/nazitunnels.org\/wp-content\/uploads\/2014\/11\/Screen-Shot-2014-11-18-at-10.52.38-AM-300x218.png 300w, http:\/\/nazitunnels.org\/wp-content\/uploads\/2014\/11\/Screen-Shot-2014-11-18-at-10.52.38-AM-150x109.png 150w, http:\/\/nazitunnels.org\/wp-content\/uploads\/2014\/11\/Screen-Shot-2014-11-18-at-10.52.38-AM-624x454.png 624w\" sizes=\"(max-width: 632px) 100vw, 632px\" \/><\/a><\/p>\n<p>So the goal became to water mark each of the images, and then to run an OCR program on them to grab the contents into plain text.<\/p>\n<h2>Watermark<\/h2>\n<p>There are many options for water marking images. I chose to use the incredibly powerful ImageMagick tool. The ImageMagick website has a <a href=\"http:\/\/www.imagemagick.org\/Usage\/annotating\/\">pretty good tutorial<\/a> on adding watermarks to single images. I chose to add a smoky gray rectangle to the bottom of the image with the copyright text in white.<\/p>\n<p>The image watermark command by itself goes like this:<\/p>\n<pre class=\"line-height:20 height-mode:1 height:50 wrap:true lang:sh decode:true\">width=$(identify -format %w \"\/path\/to\/copies\/filename.png\"); \\\r\ns=$((width\/2)); \\\r\nconvert -background '#00000080' -fill white -size \"$s\" \\\r\n-font \"\/path\/to\/font\/file\/font.ttf\" label:\"Copyright \u00a92014 Ammon\" miff:- | \\\r\ncomposite -gravity south -geometry +0+3 - \\\r\n\"\/path\/to\/copies\/filename.png\" \"\/path\/to\/marked\/filename.png\"<\/pre>\n<p>This command can actually be run on the command line as is (replacing the paths to images the font file, and copyright text of course). I&#8217;ll explain the command below.<\/p>\n<p>The first line gets the width of the image to be watermarked and sets it to the variable &#8220;width&#8221;. The second line gets half the value of the width, and sets it to the variable &#8220;s&#8221;.<\/p>\n<p>The third line starts the ImageMagick command (and is broken onto several lines using the \\ to denote that the command continues). The code from &#8216;convert&#8217; to the pipe &#8216;|&#8217; creates the watermark, a dark grey rectangle with white text at the bottom of the image.<\/p>\n<p><a href=\"http:\/\/nazitunnels.org\/wp-content\/uploads\/2014\/11\/Screen-Shot-2014-11-18-at-1.40.12-PM.png\" data-rel=\"lightbox-image-1\" data-rl_title=\"\" data-rl_caption=\"\" title=\"\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-large wp-image-1775\" src=\"http:\/\/nazitunnels.org\/wp-content\/uploads\/2014\/11\/Screen-Shot-2014-11-18-at-1.40.12-PM-1024x260.png\" alt=\"Screen Shot 2014-11-18 at 1.40.12 PM\" width=\"625\" height=\"158\" srcset=\"http:\/\/nazitunnels.org\/wp-content\/uploads\/2014\/11\/Screen-Shot-2014-11-18-at-1.40.12-PM-1024x260.png 1024w, http:\/\/nazitunnels.org\/wp-content\/uploads\/2014\/11\/Screen-Shot-2014-11-18-at-1.40.12-PM-300x76.png 300w, http:\/\/nazitunnels.org\/wp-content\/uploads\/2014\/11\/Screen-Shot-2014-11-18-at-1.40.12-PM-150x38.png 150w, http:\/\/nazitunnels.org\/wp-content\/uploads\/2014\/11\/Screen-Shot-2014-11-18-at-1.40.12-PM-624x158.png 624w, http:\/\/nazitunnels.org\/wp-content\/uploads\/2014\/11\/Screen-Shot-2014-11-18-at-1.40.12-PM.png 1796w\" sizes=\"(max-width: 625px) 100vw, 625px\" \/><\/a><\/p>\n<h2>OCR<\/h2>\n<p>Most of the images I have are of typed up documents, so they are good candidates for OCR (Optical Character Recognition), or grabbing the text out of the image.<\/p>\n<p>OCR is done using a program called <a href=\"https:\/\/code.google.com\/p\/tesseract-ocr\/\">tesseract<\/a>.<\/p>\n<p>The tesseract command is relatively simple. Give it an input file name, an output file name, and an optional language.<\/p>\n<pre class=\"lang:sh decode:true\">tesseract \"\/path\/to\/input\/file.png\" \"\/path\/to\/output\/file\" -l deu<\/pre>\n<p>This will OCR file.png and create a file named file.txt. The -l (lowercase letter L) option sets the language to German (deut[sch]).<\/p>\n<p><a href=\"http:\/\/nazitunnels.org\/wp-content\/uploads\/2014\/11\/Screen-Shot-2014-11-18-at-10.53.20-AM.png\" data-rel=\"lightbox-image-2\" data-rl_title=\"\" data-rl_caption=\"\" title=\"\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-1797\" src=\"http:\/\/nazitunnels.org\/wp-content\/uploads\/2014\/11\/Screen-Shot-2014-11-18-at-10.53.20-AM.png\" alt=\"OCR'd!\" width=\"858\" height=\"468\" srcset=\"http:\/\/nazitunnels.org\/wp-content\/uploads\/2014\/11\/Screen-Shot-2014-11-18-at-10.53.20-AM.png 858w, http:\/\/nazitunnels.org\/wp-content\/uploads\/2014\/11\/Screen-Shot-2014-11-18-at-10.53.20-AM-300x163.png 300w\" sizes=\"(max-width: 858px) 100vw, 858px\" \/><\/a><\/p>\n<h2>The Script<\/h2>\n<p>The script is available at my GitHub repo:\u00a0<a href=\"https:\/\/github.com\/mossiso\/ocr-watermark\">https:\/\/github.com\/mossiso\/ocr-watermark<\/a><\/p>\n<p>Here is how to use the script.<\/p>\n<p>Download the ocrwm file and put it in the directory that has the image files.<\/p>\n<p>Open the file with a text editor and set the default label to use in the watermark. If desired, you can also specify a font file to use.<\/p>\n<p><a href=\"http:\/\/nazitunnels.org\/wp-content\/uploads\/2014\/11\/edit-2-lines.png\" data-rel=\"lightbox-image-3\" data-rl_title=\"\" data-rl_caption=\"\" title=\"\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-1783\" src=\"http:\/\/nazitunnels.org\/wp-content\/uploads\/2014\/11\/edit-2-lines.png\" alt=\"edit-2-lines\" width=\"530\" height=\"240\" srcset=\"http:\/\/nazitunnels.org\/wp-content\/uploads\/2014\/11\/edit-2-lines.png 530w, http:\/\/nazitunnels.org\/wp-content\/uploads\/2014\/11\/edit-2-lines-300x135.png 300w, http:\/\/nazitunnels.org\/wp-content\/uploads\/2014\/11\/edit-2-lines-150x67.png 150w\" sizes=\"(max-width: 530px) 100vw, 530px\" \/><\/a><\/p>\n<p>On the command line (the terminal), simply type:<\/p>\n<pre class=\"lang:sh decode:true\">bash ocrwm<\/pre>\n<p>At it&#8217;s basic this will make a &#8220;copies&#8221; directory and put in there a copy of each image file (it will find images of the format JPG, GIF, TIF, and PNG in the directory where you run the command).<\/p>\n<p>&nbsp;<\/p>\n<p>To OCR and Watermark the images do:<\/p>\n<pre class=\"lang:sh decode:true\">bash ocrwm -ow<\/pre>\n<p>This will make the copies as above, but will also create a directory named &#8220;ocr&#8221; and a directory named &#8220;marked&#8221; and add respective files therein.<\/p>\n<p>&nbsp;<\/p>\n<p>You can also create a single pdf file from the images in the directory like so:<\/p>\n<pre class=\"lang:sh decode:true\">bash ocrwm -pow<\/pre>\n<p>&nbsp;<\/p>\n<p>Adding the l (lowercase letter L) option allows you to set the text in the watermark.<\/p>\n<pre class=\"lang:sh decode:true\">bash ocrwm -powl \"Copyright \u00a92014 Me\"<\/pre>\n<p>&nbsp;<\/p>\n<p>There is an option to not copy the files. This is useful if the files have been copied using this script previously (say you ran the script but only did water marks and not OCR, then to just do the OCR you can run the script again but not have to copy the files again).<\/p>\n<pre class=\"lang:sh decode:true\">bash ocrwm -co<\/pre>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h2>Gotchas<\/h2>\n<p>Here are things to look out for when running the script.<\/p>\n<p>By default, the script will run the OCR program, tesseract, with German as the default language. You can change that to English by deleting the &#8220;-l deu&#8221; part on the line that calls tesseract. The list of language abbreviations and languages available are in the <a href=\"http:\/\/tesseract-ocr.googlecode.com\/svn\/trunk\/doc\/tesseract.1.html\">tesseract manual<\/a> (or on the command line type).<\/p>\n<pre class=\"lang:sh decode:true\">man tesseract<\/pre>\n<h4>\u00a0PDFs<\/h4>\n<p>A few times I had PDFs as the original format to work with. In most cases these were multi-page PDFs. In order to use the script with these, I first needed to break out each page of the PDF and convert it to a PNG\u00a0format. See <a href=\"http:\/\/www.scantips.com\/basics09.html\">here<\/a> for a reason to choose PNG over other formats.<\/p>\n<p>The ImageMagick command &#8216;convert&#8217; will take care of that:<\/p>\n<pre class=\"lang:sh decode:true\">convert -density 600 -quality 100 original.pdf newfile.png<\/pre>\n<p>Depending on how many pages are in the PDF, the command can take quite a while to run. For a 30 page PDF, it took my laptop about 5 minutes. The end result is a PNG image for each page incrementally numbered beginning with zero. If the PDF above had four pages, I would end up with the following PNGs: newfile-0.png, newfile-1.png, newfile-2.png, newfile-3.png<\/p>\n<p>Now I could run the ocrwm script in the directory and get OCR&#8217;ed and watermarked images. In this case I could leave off the &#8216;p&#8217; option because I began with a PDF with all pages combined.<\/p>\n<pre class=\"lang:sh decode:true\">bash ocrwm -ow<\/pre>\n<p>&nbsp;<\/p>\n<p>Feel free to download the script, make changes or improvements, and send them back to me (via the github page).<\/p>\n<p>&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>I have accumulated nearly 2000 images, all scans of documents, relating to the dissertation. One goal of the project is to make these documents open and available in an Omeka database. In order to more correctly attribute these documents to the archives where I got them, I need to place a watermark on each image. &hellip;<\/p>\n","protected":false},"author":1,"featured_media":1786,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"footnotes":"","jetpack_publicize_message":"","jetpack_is_tweetstorm":false,"jetpack_publicize_feature_enabled":true},"categories":[1,86],"tags":[83,76,84,85],"class_list":["post-1765","post","type-post","status-publish","format-standard","has-post-thumbnail","hentry","category-news","category-technology","tag-bash","tag-code","tag-orc","tag-watermark"],"jetpack_publicize_connections":[],"jetpack_featured_media_url":"http:\/\/nazitunnels.org\/wp-content\/uploads\/2014\/11\/IMG_0927.png","_links":{"self":[{"href":"http:\/\/nazitunnels.org\/wp-json\/wp\/v2\/posts\/1765"}],"collection":[{"href":"http:\/\/nazitunnels.org\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/nazitunnels.org\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/nazitunnels.org\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"http:\/\/nazitunnels.org\/wp-json\/wp\/v2\/comments?post=1765"}],"version-history":[{"count":19,"href":"http:\/\/nazitunnels.org\/wp-json\/wp\/v2\/posts\/1765\/revisions"}],"predecessor-version":[{"id":1798,"href":"http:\/\/nazitunnels.org\/wp-json\/wp\/v2\/posts\/1765\/revisions\/1798"}],"wp:featuredmedia":[{"embeddable":true,"href":"http:\/\/nazitunnels.org\/wp-json\/wp\/v2\/media\/1786"}],"wp:attachment":[{"href":"http:\/\/nazitunnels.org\/wp-json\/wp\/v2\/media?parent=1765"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/nazitunnels.org\/wp-json\/wp\/v2\/categories?post=1765"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/nazitunnels.org\/wp-json\/wp\/v2\/tags?post=1765"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}